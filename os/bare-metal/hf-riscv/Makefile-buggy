#source:  https://github.com/memfault/zero-to-main/tree/master/minimal

# replace MAIN_FILE by the name of the test app. 
# $ make MAIN_FILE=<main code> all

MAIN_FILE ?=simple.c
# extracts the 'main'
#PROJECT = $(suffix $(basename $(MAIN_FILE)))
PROJECT = main
BUILD_DIR ?= build

# Be silent per default, but 'make V=1' will show all compiler calls.
ifneq ($(V),1)
export Q := @
# Do not print "Entering directory ...".
MAKEFLAGS += --no-print-directory
endif

CC    = riscv64-unknown-elf-gcc
CPP   = riscv64-unknown-elf-g++
AS    = riscv64-unknown-elf-as
AR    = riscv64-unknown-elf-ar
LD    = riscv64-unknown-elf-ld
DUMP  = riscv64-unknown-elf-objdump -Mno-aliases
READ  = riscv64-unknown-elf-readelf
OBJ   = riscv64-unknown-elf-objcopy
SIZE  = riscv64-unknown-elf-size
MKDIR=mkdir

## find the lib dir inside the toolchain
DIR_LIB_GCC=$(shell $(CC) -march=rv32im -mabi=ilp32 --print-file-name=libgcc.a)
DIR_LIB_C=$(shell   $(CC) -march=rv32im -mabi=ilp32 --print-file-name=libm.a)
# get absolute path
LIB_DIR_LIST +=  $(dir $(abspath $(lastword $(DIR_LIB_GCC))))
LIB_DIR_LIST +=  $(dir $(abspath $(lastword $(DIR_LIB_C))))

#LDFLAGS += -L/opt/gcc-riscv64/riscv-gcc-8.3.0-sifive/riscv64-unknown-elf/lib/rv32im/ilp32
LIB_DIR  = $(patsubst %, -L%, $(LIB_DIR_LIST))
LIBS = -lm -lc_nano -lgcc -lstdc++ -lnosys

INC_DIRS += -I. -I/home/lsa/repos/anderson/orca-software-tools/extensions/orca-monitoring/include

#
#	-Wl,--build-id \

# use -DHEAP_SIZE and -DSTACK_SIZE to chage the memory size
# used -DCONFIG_CPLUSPLUS when using c++

ASMFLAGS = -march=rv32im -mabi=ilp32 -fPIC

# these are the flags that work for both C and C++
C_CPP_FLAGS += \
	-march=rv32im -mabi=ilp32 \
	-Wall \
	-O2 \
	-Os \
	-D_DEBUG \
	-DCONFIG_CPLUSPLUS \
	-DBARE_METAL \
	-specs=nano.specs \
	-fno-math-errno \
	-ffreestanding \
	-ffunction-sections \
	-fdata-sections \
	-nostdlib \
	-DMEMORY_ENABLE_COUNTERS -DHFRISCV_ENABLE_COUNTERS -DROUTER_ENABLE_COUNTERS \
	$(INC_DIRS)

# these are the flags only for C
CFLAGS += $(C_CPP_FLAGS) \
	-std=c11 

# c++ related flags
#   -fno-exceptions
#	-fno-unwind-tables, removes the .eh_frame section
#   -fno-rtti \  
CXXFLAGS += $(C_CPP_FLAGS) \
    -fno-exceptions \
	-fno-unwind-tables \
    -fno-rtti \
	-std=c++11

LDFLAGS += \
	-Wl,--gc-sections \
	-Wl,--print-memory-usage \
	-Wl,-Map=minimal.map \
	$(LIB_DIR) \
	-Wl,--start-group $(LIBS) -Wl,--end-group \
	-T hf-risc.ld

LDLDFLAGS += \
	-melf32lriscv \
	--gc-sections \
	--print-memory-usage \
	-Map=minimal.map \
	$(LIB_DIR) \
	--start-group  $(LIBS) --end-group \
	-T hf-risc.ld


SRCS = \
	syscalls.c \
	crt0.s \
	startup.c \
	ext-orca-monitoring.a \
	$(MAIN_FILE)

OBJ_DIR = $(BUILD_DIR)/objs
OBJS1 = $(patsubst %.c,$(OBJ_DIR)/%.o,$(SRCS))
OBJS = $(patsubst %.s,$(OBJ_DIR)/%.o,$(OBJS1))

.PHONY: all clean
all: $(BUILD_DIR)/$(PROJECT).bin

$(BUILD_DIR):
	$(Q)$(MKDIR) -p $(BUILD_DIR)

$(OBJ_DIR):
	$(Q)$(MKDIR) -p $(OBJ_DIR)

$(OBJ_DIR)/%.o: %.c $(OBJ_DIR)
	@echo "Compiling $<"
	$(Q)$(MKDIR) -p $(dir $@)
	$(Q)$(CC) -c -o $@ $< $(CFLAGS)

$(OBJ_DIR)/%.o: %.cpp $(OBJ_DIR)
	@echo "Compiling $<"
	$(Q)$(MKDIR) -p $(dir $@)
	$(Q)$(CPP) -c -o $@ $< $(CXXFLAGS)

$(OBJ_DIR)/%.o: %.s $(OBJ_DIR)
	@echo "Compiling $<"
	$(Q)$(MKDIR) -p $(dir $@)
	$(Q)$(AS) -c $(ASMFLAGS) -o $@ $<

$(BUILD_DIR)/$(PROJECT).bin: $(BUILD_DIR)/$(PROJECT).elf $(BUILD_DIR)/$(PROJECT).lst $(BUILD_DIR)/$(PROJECT).read
	$(OBJ) $< $@ -O binary
	$(Q)hexdump -v -e '4/1 "%02x" "\n"' $(BUILD_DIR)/$(PROJECT).bin > $(BUILD_DIR)/$(PROJECT).txt
	$(SIZE) $<

$(BUILD_DIR)/$(PROJECT).lst: $(BUILD_DIR)/$(PROJECT).elf $(BUILD_DIR)
	$(DUMP) -D $< > $@

$(BUILD_DIR)/$(PROJECT).read: $(BUILD_DIR)/$(PROJECT).elf $(BUILD_DIR)
	$(READ) -a $< > $@

$(BUILD_DIR)/$(PROJECT).elf: $(OBJS)
	@echo "Linking $@"
	$(Q)$(CPP) $(CXXFLAGS) -Wl,--start-group $^ -Wl,--end-group $(LDFLAGS) -o $@	

build/bare-metal.a : build/objs/syscalls.o build/objs/crt0.o build/objs/startup.o
	$(Q)$(AR) rcs $@ $^

build/app.a : build/objs/simple.o 
	$(Q)$(AR) rcs $@ $^

#$(BUILD_DIR)/$(PROJECT).elf: build/bare-metal.a build/app.a ext-orca-monitoring.a
#	@echo "Linking $@"
#	$(Q)$(LD)   $(LDLDFLAGS) --start-group $^ --end-group -o $@	

clean:
	@echo "Cleaning $<"
	$(Q)rm -rf build logs/*.log *.map
